Debug = [0]

index_model = [
	[  0,  1, 31, 35, -1, -1, -1, -1, -1, -1],
	[  2,  3,  4, -1, -1, -1, -1, -1, -1, -1],
	[  5,  6,  7, -1, -1, -1, -1, -1, -1, -1],
	[  8,  9, 10, -1, -1, -1, -1, -1, -1, -1],
	[ 11, 12, 13, 34, -1, -1, -1, -1, -1, -1],
	[ 14, 15, -1, -1, -1, -1, -1, -1, -1, -1],
	[ 16, -1, -1, -1, -1, -1, -1, -1, -1, -1],
	[ 17, 18, 19, -1, -1, -1, -1, -1, -1, -1],
	[ 20, -1, -1, -1, -1, -1, -1, -1, -1, -1],
	[ 21, 22, 23, 24, -1, -1, -1, -1, -1, -1],
	[ 25, 26, 32, 33, -1, -1, -1, -1, -1, -1],
	[ 27, 28, -1, -1, -1, -1, -1, -1, -1, -1],
	[ 29, -1, -1, -1, -1, -1, -1, -1, -1, -1],
	[ 30, -1, -1, -1, -1, -1, -1, -1, -1, -1]
]

classify_model = [
	[ 0 ],
	[ 1 ],
	[ 2 ],
	[ 3 ]
]

ep_model = [
	[ 0 ]
]

fu_model = [
	[ 0 ]
]

direction_model = [
	[ 0 ],
	[ 1 ]
]

NUM_MODEL = 36
NUM_MODEL_CLASSIFY = 4
NUM_MODEL_EP = 1
NUM_MODEL_FU = 1
NUM_MODEL_DIRECTION = 2
ADD_NUM_MODEL = 0

NUM_MODEL_CAFFE = 36
NUM_MODEL_CAFFE_CLASSIFY = 4
NUM_MODEL_CAFFE_EP = 1
NUM_MODEL_CAFFE_FU = 1
NUM_MODEL_CAFFE_DIRECTION = 2

#所有模型
model_all-NUM_MODEL-ADD_NUM_MODEL = [
	  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,
	 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	 30, 31, 32, 33, 34, 35
]

#是否补充像素，新的10
#tensorRT，mnn不需要此字段
add_pixel-NUM_MODEL-ADD_NUM_MODEL-C = [
	  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	  0,  0,  0,  0,  0,  0
]

add_pixel-NUM_MODEL-ADD_NUM_MODEL-F = [
	  0,416,  0,  0,  0,416,  0,416,416,416,
	416,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	480,  0,  0,  0,  0,  0,  0,  0,512,  0,
	  0,  0,  0,  0,  0,  0
]

#是否输出空格
output_space-NUM_MODEL-ADD_NUM_MODEL = [
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1
]
#半角是否转全角
half_full-NUM_MODEL-ADD_NUM_MODEL = [
	  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	  0,  0,  0,  0,  0,  0
]

#模型索引，之所以2维是为了照顾使用多个模型那里
model_indexto_model-NUM_MODEL-ADD_NUM_MODEL-NUM_MODEL = [
	[  0, -1, -1, -1, -1],
	[  1, -1, -1, -1, -1],
	[  2, -1, -1, -1, -1],
	[  3, -1, -1, -1, -1],
	[  4, -1, -1, -1, -1],
	[  5, -1, -1, -1, -1],
	[  6, -1, -1, -1, -1],
	[  7, -1, -1, -1, -1],
	[  8, -1, -1, -1, -1],
	[  9, -1, -1, -1, -1],
	[ 10, -1, -1, -1, -1],
	[ 11, -1, -1, -1, -1],
	[ 12, -1, -1, -1, -1],
	[ 13, -1, -1, -1, -1],
	[ 14, -1, -1, -1, -1],
	[ 15, -1, -1, -1, -1],
	[ 16, -1, -1, -1, -1],
	[ 17, -1, -1, -1, -1],
	[ 18, -1, -1, -1, -1],
	[ 19, -1, -1, -1, -1],
	[ 20, -1, -1, -1, -1],
	[ 21, -1, -1, -1, -1],
	[ 22, -1, -1, -1, -1],
	[ 23, -1, -1, -1, -1],
	[ 24, -1, -1, -1, -1],
	[ 25, -1, -1, -1, -1],
	[ 26, -1, -1, -1, -1],
	[ 27, -1, -1, -1, -1],
	[ 28, -1, -1, -1, -1],
	[ 29, -1, -1, -1, -1],
	[ 30, -1, -1, -1, -1],
	[ 31, -1, -1, -1, -1],
	[ 32, -1, -1, -1, -1],
	[ 33, -1, -1, -1, -1],
	[ 34, -1, -1, -1, -1],
	[ 35, -1, -1, -1, -1]
]

#识别模型名称
model_name-NUM_MODEL = [
	"last",            "jsz_all",       "xsz_last", "xsz_last_f", "xsz_all",
	"sfz_nameaddress", "sfz_last",      "sfz_all",  "ynid",       "ynid_id",
	"ynid_last",       "qcdjz_0",       "qcdjz_1",  "qcdjz_2",    "yyzz_djrq",
	"yyzz_all",        "hkb_djrq",      "cb_xmz",   "cb_xmmc",    "cb_gsmc",
	"yhk_all",         "ty_xm",         "ty",       "ty_new",     "ftz",
	"sx",              "sx_je",         "ywwd",     "yw",         "alb",
	"mrz",             "jsz_xsz_qdlstm","sxft",     "tyft_shuban","djz",
	"jsz_xsz"
]

#分类模型名称
model_name_classify-NUM_MODEL_CLASSIFY = [
	"classify_20201109", "fcz_classify", "classify_20210722", "hp_classify"
]

#八点模型名称
model_name_ep-NUM_MODEL_EP = [
	"sfz_eightpoint"
]

model_name_fu-NUM_MODEL_FU = [
	"ty_fourpoint"
]

#文本方向模型名称
model_name_direction-NUM_MODEL_DIRECTION = [
	"ty_direction", "yhk_direction"
]

#第一个表示是否与输入层尺寸一致，不一致按固定尺寸32*280；第二个表示
#caffe与tensorRT共享
same_size_exp-NUM_MODEL-C = [
	[  true, false ],[ false, false ],[  true, false ],[  true, false ],[ false, false ],
	[ false, false ],[ false, false ],[ false, false ],[ false, false ],[ false, false ],
	[ false, false ],[ false, false ],[ false, false ],[ false, false ],[ false, false ],
	[ false, false ],[ false, false ],[ false, false ],[ false, false ],[ false, false ],
	[ false, false ],[ false, false ],[ false, false ],[ false, false ],[ false, false ],
	[ false, false ],[ false, false ],[ false, false ],[ false, false ],[ false, false ],
	[ false, false ],[ false, false ],[ false, false ],[ false, false ],[ false, false ],
	[ false, false ]
]

same_size_exp-NUM_MODEL-F = [
	[ false, false ],[  true, false ],[ false, false ],[ false, false ],[ false, false ],
	[  true, false ],[ false, false ],[  true, false ],[  true, false ],[  true, false ],
	[  true, false ],[ false, false ],[ false, false ],[ false, false ],[ false, false ],
	[ false, false ],[ false, false ],[ false, false ],[ false, false ],[ false, false ],
	[  true, false ],[ false, false ],[ false, false ],[ false, false ],[ false, false ],
	[ false, false ],[ false, false ],[ false, false ],[  true, false ],[ false, false ],
	[ false, false ],[ false, false ],[ false, false ],[ false, false ],[ false, false ],
	[ false, false ]
]

same_size_exp-NUM_MODEL-M = [
	[  true, false ],[ false, false ],[  true, false ],[  true, false ],[ false, false ],
	[ false, false ],[ false, false ],[ false, false ],[ false, false ],[ false, false ],
	[ false, false ],[ false, false ],[ false, false ],[ false, false ],[ false, false ],
	[ false, false ],[ false, false ],[ false, false ],[ false, false ],[ false, false ],
	[ false, false ],[ false, false ],[ false, false ],[ false, false ],[ false, false ],
	[ false, false ],[ false, false ],[ false, false ],[ false, false ],[ false, false ],
	[ false, false ],[ false, false ],[ false, false ],[ false, false ],[ false, false ],
	[ false, false ]
]

same_size_classify = [
	"true", "true", "true", "true"
]

same_size_direction = [
	"true", "true"
]
#其它平台不需要此字段
OCR_RESULT-F = [
	[  0,   0], [103,9034], [  0,   0], [  0,   0], [  0,   0],
	[103,8540], [  0,   0], [103,9281], [103,  48], [103,  11],
	[103,  61], [  0,   0], [  0,   0], [  0,   0], [  0,   0],
	[  0,   0], [  0,   0], [  0,   0], [  0,   0], [  0,   0],
	[119,  42], [  0,   0], [  0,   0], [  0,   0], [  0,   0],
	[  0,   0], [  0,   0], [  0,   0], [127,  90], [  0,   0],
	[  0,   0], [  0,   0], [  0,   0], [  0,   0], [  0,   0],
	[  0,   0]
]

#下面三项CPU和GPU配置是不同的，CPU全0，GPU全1
#[CPU]
CCPU_GPU-NUM_MODEL_CAFFE = [
	  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	  0,  0,  0,  0,  0,  0
]
CCPU_GPU_CLASSIFY-NUM_MODEL_CAFFE_CLASSIFY = [ 0, 0, 0, 0 ]
CCPU_GPU_EP-NUM_MODEL_CAFFE_EP = [ 0 ]
CCPU_GPU_FU-NUM_MODEL_CAFFE_FU = [ 0 ]
CCPU_GPU_DIRECTION-NUM_MODEL_CAFFE_DIRECTION = [ 0, 0 ]
#[GPU]
GCPU_GPU-NUM_MODEL_CAFFE = [
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1
]
GCPU_GPU_CLASSIFY-NUM_MODEL_CAFFE_CLASSIFY = [ 1, 1, 1, 1 ]
GCPU_GPU_EP-NUM_MODEL_CAFFE_EP = [ 1 ]
GCPU_GPU_FU-NUM_MODEL_CAFFE_FU = [ 1 ]
GCPU_GPU_DIRECTION-NUM_MODEL_CAFFE_DIRECTION = [ 1, 1 ]

#上面三项CPU和GPU配置是不同的，CPU全0，GPU全1
#下面的宽度是设定的最大宽度
#caffe,tensorRT共享，tflite不需要
MAX_WIDTH-NUM_MODEL_CAFFE = [
	 160, 416, 160, 160, 416, 416, 416, 416, 256, 416,
	 416, 416, 640, 416, 320, 512, 224, 320, 416, 416,
	 480, 320, 512,1024, 512, 512, 416, 640, 512, 640,
	1280, 416, 640,1024, 640, 640
]

MAX_WIDTH-NUM_MODEL_CAFFE-M = [
	 160, 416, 160, 160, 416, 416, 416, 416, 256, 416,
	 416, 416, 640, 416, 320, 512, 224, 320, 416, 416,
	 480, 320, 512, 512, 512, 512, 416, 640, 512, 640,
	1280, 416, 640,1024, 640, 640
]

#宽
HEIGHT-NUM_MODEL_CAFFE = [
	 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	 32, 32, 32, 32, 32, 32
]

#是否归一化
b_style-NUM_MODEL_CAFFE =[
	  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,
	  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1
]
b_style_classify-NUM_MODEL_CAFFE_CLASSIFY = [ 1, 1, 1, 1 ]
b_style_ep-NUM_MODEL_CAFFE_EP = [ 1 ]
b_style_fu-NUM_MODEL_CAFFE_FU = [ 1 ]
b_style_direction-NUM_MODEL_CAFFE_DIRECTION = [ 1, 1 ]

e_style-NUM_MODEL_CAFFE = [
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1
]

label_style-NUM_MODEL_CAFFE = [
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	  1,  1,  1,  1,  1,  1
]

channel_num-NUM_MODEL_CAFFE = [
	  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
	  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
	  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
	  3,  3,  3,  3,  3,  3
]
channel_num_classify-NUM_MODEL_CAFFE_CLASSIFY = [ 3, 3, 3, 3 ]
channel_num_ep-NUM_MODEL_CAFFE_EP = [ 3 ]
channel_num_fu-NUM_MODEL_CAFFE_FU = [ 3 ]
channel_num_direction-NUM_MODEL_CAFFE_DIRECTION = [ 3, 3 ]

#TensorRT特有

classify_wh = [
	[128,128], [512,512], [128,128], [512,512]
]

CLASSIFY_RESULT = [
	 30,  8, 35,  5
]

direction_wh = [
	[512, 32], [416, 32]
]

DIRECTION_RESULT = [
	  2,  2
]

ep_wh = [
	[128,128]
]

fu_wh = [
	[128,128]
]

ocr_dynamic = [
	[[1, 3, 32, 32], [1, 3, 32, 160]], [[1, 3, 32, 32], [1, 3, 32, 416]], [[1, 3, 32, 32], [1, 3, 32, 160]], [[1, 3, 32, 32], [1, 3, 32, 160]], [[1, 3, 32, 32], [1, 3, 32, 416]],
	[[1, 3, 32, 32], [1, 3, 32, 416]], [[1, 3, 32, 32], [1, 3, 32, 416]], [[1, 3, 32, 32], [1, 3, 32, 416]], [[1, 3, 32, 32], [1, 3, 32, 256]], [[1, 3, 32, 32], [1, 3, 32, 416]],
	[[1, 3, 32, 32], [1, 3, 32, 416]], [[1, 3, 32, 32], [1, 3, 32, 416]], [[1, 3, 32, 32], [1, 3, 32, 640]], [[1, 3, 32, 32], [1, 3, 32, 416]], [[1, 3, 32, 32], [1, 3, 32, 320]],
	[[1, 3, 32, 32], [1, 3, 32, 512]], [[1, 3, 32, 32], [1, 3, 32, 416]], [[1, 3, 32, 32], [1, 3, 32, 320]], [[1, 3, 32, 32], [1, 3, 32, 416]], [[1, 3, 32, 32], [1, 3, 32, 416]],
	[[1, 3, 32, 32], [1, 3, 32, 480]], [[1, 3, 32, 32], [1, 3, 32, 320]], [[1, 3, 32, 32], [1, 3, 32, 512]], [[1, 3, 32, 32], [1, 3, 32,1024]], [[1, 3, 32, 32], [1, 3, 32, 512]],
	[[1, 3, 32, 32], [1, 3, 32, 512]], [[1, 3, 32, 32], [1, 3, 32, 576]], [[1, 3, 32, 32], [1, 3, 32, 640]], [[1, 3, 32, 32], [1, 3, 32, 512]], [[1, 3, 32, 32], [1, 3, 32, 512]],
	[[1, 3, 32, 32], [1, 3, 32,1280]], [[1, 3, 32, 32], [1, 3, 32, 416]], [[1, 3, 32, 32], [1, 3, 32, 640]], [[1, 3, 32, 32], [1, 3, 32, 512]], [[1, 3, 32, 32], [1, 3, 32, 640]],
	[[1, 3, 32, 32], [1, 3, 32, 640]]
]
